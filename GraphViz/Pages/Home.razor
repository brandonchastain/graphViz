@page "/"

@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using Microsoft.JSInterop
@using System.Text
@inject IJSRuntime JsRuntime

    <div id="canvasHolder" class="col-4" tabindex="1" @onclick="Clicked" style="margin: auto; position: fixed; height: 100%; overflow:hidden; -webkit-tap-highlight-color:transparent; outline:none;" >
        <BECanvas @ref="_canvasReference"></BECanvas>
    </div>

@code {
    private Canvas2DContext ctx;
    protected BECanvasComponent _canvasReference;
    private bool crashed = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        this.ctx = await _canvasReference.CreateCanvas2DAsync();
        await JsRuntime.InvokeAsync<object>("initRenderJS", DotNetObjectReference.Create(this));
        await base.OnInitializedAsync();
    }

    public void Clicked(MouseEventArgs e)
    {
        // send click to the game
    }

    [JSInvokable]
    public void ResizeInBlazor(double width, double height)
    {
        // send width and height to the game
    }

    [JSInvokable]
    public async ValueTask RenderInBlazor(float ts)
    {
        if (crashed)
        {
            return;
        }

        try
        {
            var timeStamp = DateTimeOffset.FromUnixTimeMilliseconds((long)ts);
            // call the renderer
        }
        catch (Exception ex)
        {
            crashed = true;
            await RenderError(ex.ToString());
        }
    }

    private async ValueTask RenderError(string msg)
    {
        await this.ctx.BeginBatchAsync();
        await this.ctx.SetFillStyleAsync("black");
        await this.ctx.FillRectAsync(10, 550, 200, 200);
        await this.ctx.SetFontAsync("bold 12px Helvetica");
        await this.ctx.SetFillStyleAsync("red");
        var parts = msg.Split("\n");
        int curRow = 620;
        foreach (var part in parts)
        {
            await this.ctx.FillTextAsync(part, 10, curRow);
            curRow += 20;
        }
        await this.ctx.EndBatchAsync();
    }
}
