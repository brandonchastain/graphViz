@page "/"

@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using Microsoft.JSInterop
@using System.Text
@using GraphViz

@inject IJSRuntime JsRuntime

    <div id="canvasHolder" class="" tabindex="1" @onclick="Onclick" style="margin: auto; height: 100%; -webkit-tap-highlight-color:transparent; outline:none;" >
        <BECanvas @ref="_canvasReference"></BECanvas>
    </div>

@code {
    protected BECanvasComponent _canvasReference;
    private Canvas2DContext ctx;
    private BlazorRenderer renderer;
    private VizUI ui;
    private bool crashed = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        this.ctx = await _canvasReference.CreateCanvas2DAsync();
        this.renderer = new BlazorRenderer(this.ctx);
        this.ui = new VizUI();

        await JsRuntime.InvokeAsync<object>("initRenderJS", DotNetObjectReference.Create(this));
        await base.OnInitializedAsync();
    }

    [JSInvokable]
    public void Onclick()
    {
        ui.Refresh();
    }

    [JSInvokable]
    public async ValueTask RenderInBlazor(float ts)
    {
        if (crashed)
        {
            return;
        }

        try
        {
            var timeStamp = DateTimeOffset.FromUnixTimeMilliseconds((long)ts);
            await this.renderer.Draw(this.ui.GetTreeToDisplay(timeStamp));
        }
        catch (Exception ex)
        {
            crashed = true;
            await this.renderer.RenderError(ex.ToString());
        }
    }
}
