@page "/"

@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using Microsoft.JSInterop
@using System.Text
@using GraphViz
@using Core

@inject IJSRuntime JsRuntime

    <div id="formHolder">
        <label for="nodeCount">node count</label>
        <input type="text" @bind="NodeCount" id="nodeCount" name="nodeCount">
        <label for="nullProb">% chance of null</label>
        <input type="text" @bind="NullProbPct" id="nullProb" name="nullProb">
        <label for="artMode">art mode</label>
        <input type="checkbox" @bind="IsArtModeEnabled" id="artMode" name="artMode">
        <button type="submit" @onclick="OnSubmit">Submit</button>
    </div>
    <div id="canvasHolder"
        class=""
        tabindex="1"
        @onclick="Onclick"
        @onmouseover="Onmouseover"
        style="margin: auto; overflow: auto; height: 10000px; width: 10000px; -webkit-tap-highlight-color:transparent; outline:none;">
        <BECanvas @ref="_canvasReference"></BECanvas>
    </div>

@code {
    protected BECanvasComponent _canvasReference;
    private BlazorRenderer renderer;
    private TreeBuilder ui;

    private Tree<int?> tree;
    private uint treeSize;

    private long width;
    private long height;
    private double mouseOffsetX;
    private double mouseOffsetY;

    private uint NodeCount { get; set; } = 20;
    private uint NullProbPct { get; set; } = 10;
    private bool IsArtModeEnabled { get; set; } = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        var ctx = await _canvasReference.CreateCanvas2DAsync();
        await JsRuntime.InvokeAsync<object>("initRenderJS", DotNetObjectReference.Create(this));
        await base.OnInitializedAsync();

        this.renderer = new BlazorRenderer(ctx, this.width, this.height);
        this.ui = new TreeBuilder(NodeCount);

        // generate first tree
        await OnSubmit();
    }

    [JSInvokable]
    public async Task OnSubmit()
    {
        ui.NodeCount = NodeCount;
        ui.NullProbabilityPct = NullProbPct;
        this.mouseOffsetX = -1;
        this.mouseOffsetY = -1;
        await renderer.SetArtMode(IsArtModeEnabled);
        BuildTree();
    }

    [JSInvokable]
    public void Onclick(MouseEventArgs e)
    {
        this.mouseOffsetX = e.OffsetX;
        this.mouseOffsetY = e.OffsetY;
    }

    [JSInvokable]
    public void Onmouseover(MouseEventArgs e)
    {
        this.mouseOffsetX = e.OffsetX;
        this.mouseOffsetY = e.OffsetY;
    }

    private void BuildTree()
    {
        (var tree, var size) = this.ui.Generate();
        this.tree = tree;
        this.treeSize = size;
    }

    [JSInvokable]
    public async ValueTask RenderInBlazor(float ts)
    {
        try
        {
            // var timeStamp = DateTimeOffset.FromUnixTimeMilliseconds((long)ts);
            await this.renderer.DrawAsync(tree, treeSize);
            await this.renderer.DrawPathToRoot((long)this.mouseOffsetX, (long)this.mouseOffsetY);
        }
        catch (Exception ex)
        {
            await this.renderer.RenderError(ex.ToString());
        }
    }

    [JSInvokable]
    public void ResizeInBlazor(long width, long height)
    {
        this.width = width;
        this.height = height;
    }
}
